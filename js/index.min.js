let status="JS - OK!";function cl(e,t,o,n){return console.log(e,t||"",o||"",n||""),"-"}var glob={navMenuWrapper:null,navMenu:null,pageOverlay:null,scrollTopButton:null};$(".click-for-video").click(function(){this.style.display="none",$("div.youtube").css("display","block"),$("div.youtube").css("display","block"),$("iframe.youtube").prop("src","https://www.youtube.com/embed/dQw4w9WgXcQ?;autoplay=1&;controls=0&;showinfo=0")});var globFunc={returnDOM:function(e){return e instanceof jQuery?e[0]:e},showOverlay:function(e,t,o){switch(e){case"popup":t.classList.contains("js_openPopup")||(t.style.zIndex=1150,t.style.visibility="visible",t.classList.add("js_openPopup"),t.classList.add("js_open"),o&&t.classList.add(o),document.body.classList.add("js_pageOverlayOpen"));break;case"menu":t.classList.contains("js_openMenu")||(t.style.zIndex=900,t.style.visibility="visible",t.classList.add("js_openMenu"),t.classList.add("js_open"),document.body.classList.add("js_pageOverlayOpen"))}},hideOverlay:function(e,t,o){switch(e){case"popup":t.classList.contains("js_openPopup")&&(t.classList.remove("js_openPopup"),t.classList.remove("js_open"),o&&t.classList.remove(o),document.body.classList.remove("js_pageOverlayOpen"),setTimeout(function(){t.classList.contains("js_openPopup")||(t.style.zIndex=-10,t.style.visibility="hidden")},300));break;case"menu":t.classList.contains("js_openMenu")&&(t.classList.remove("js_openMenu"),t.classList.remove("js_open"),document.body.classList.remove("js_pageOverlayOpen"),setTimeout(function(){t.classList.contains("js_openMenu")||(t.style.zIndex=-10,t.style.visibility="hidden")},300))}},toggleButtonContent:function(e,t){var o,n=this.returnDOM(e);t?o=t:e.dataset.text&&(o={default:e.dataset.text,active:e.dataset.textActive}),n.classList.contains("active")?(o&&(n.querySelector("span").innerHTML=o.default),n.classList.remove("active")):(o&&(n.querySelector("span").innerHTML=o.active),n.classList.add("active"))},dropDown:(e,t)=>{e.checked||e.classList.contains("active")?t.style.height=t.firstElementChild.offsetHeight+"px":t.style.height="0px"},animateBlock:function(e){let t=this;this.removeClassFrom(e,"js_animate"),setTimeout(function(){t.addClassTo(e,"js_animate")},50)},getCurrentYPosition:function(){return window.pageYOffset||document.documentElement.scrollTop},addClassTo:function(e,t){var o=this.returnDOM(e);o.classList.contains(t)||o.classList.add(t)},removeClassFrom:function(e,t){var o=this.returnDOM(e);o.classList.contains(t)&&o.classList.remove(t)},transitionHandler:function(e,t,o){e.propertyName&&console.log(e.propertyName),e.srcElement&&console.log(e.srcElement)},getChildsTotalWidth:function(e){let t=e.children,o=0;for(let e=0;e<t.length;e++)o+=t[e].offsetWidth;return o},getCoordsOnPage:function(e){var t=this.returnDOM(e).getBoundingClientRect();return{top:t.top+pageYOffset,left:t.left+pageXOffset,bottom:t.bottom+pageYOffset}},getCoordsOnScreen:function(e){var t=this.returnDOM(e).getBoundingClientRect();return{top:t.top,left:t.left,bottom:t.bottom,right:t.right,width:t.width,height:t.height}},openWidth:function(e){e.style.width=getChildsTotalWidth(e)+"px"},collapseWidth:function(e){e.style.width="0"},isVisible:function(e,t){let o;o=t||"whole";var n=window.pageYOffset,s=document.documentElement.clientHeight,i=e.getBoundingClientRect().top+pageYOffset,l=i+e.offsetHeight;return"whole"==o?document.documentElement.clientWidth>991?l<=n+s&&i>=n:i<=n+s/2&&i>=n:"topBorder"==o?i>=n+130&&i<=n+s:"topBorderIn"==o?i<=n+s:void 0},isVisibleOnXAxis:function(e,t){let o=e.getBoundingClientRect().left>t.getBoundingClientRect().left,n=e.getBoundingClientRect().right<t.getBoundingClientRect().right;return o&&n},isLastChild:function(e){return!e.nextElementSibling},isFirstChild:function(e){return!e.previousElementSibling}},test="include js error";$(document).ready(function(){console.log("document ready"),test="include js - OK",glob.navMenuWrapper=document.getElementById("navMenuWrapper"),glob.navMenu=document.getElementById("navMenu"),glob.pageOverlay=document.getElementById("pageOverlay"),$("body")||console.log("jQuery Error"),$(".dropdownButton").on("click",function(){globFunc.toggleButtonContent(this),globFunc.dropDown(this,glob.navMenuWrapper)}),$("body").on("click",".searchButton",function(){let e=$("#popupSearch");e.length&&glob.PopupModule.openPopup(e,"js_openPopup_search")}),$("body").on("click",".button",function(){let e=document.getElementById("id");e&&glob.PopupModule.openPopup(e)}),$(".description .ellipsis").dotdotdot({height:80,truncate:"word",watch:!0}),$(".title.ellipsis").dotdotdot({height:85,truncate:"word",watch:!0});var e=document.querySelectorAll(".description > p");if(e.length)for(var t=0;t<e.length;t++)!e[t].innerHTML&&e[t].parentElement.removeChild(e[t]);(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)<450&&($(".slideItem").slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".slideItemVertical"}),$(".slideItemVertical").slick({slidesToShow:1,slidesToScroll:1,asNavFor:".slideItem",dots:!0,centerMode:!0,focusOnSelect:!0,vertical:!0})),(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)>550&&($(".slideItem").slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".slideItemVertical"}),$(".slideItemVertical").slick({slidesToShow:3,slidesToScroll:1,asNavFor:".slideItem",dots:!0,centerMode:!0,focusOnSelect:!0,vertical:!0})),(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)<550&&($(".slideItem").slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".slideItemVertical"}),$(".slideItemVertical").slick({slidesToShow:2,slidesToScroll:1,asNavFor:".slideItem",dots:!0,centerMode:!0,focusOnSelect:!0,vertical:!0})),(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)<768&&($(".slideshow").slick({dots:!0,infinite:!0,speed:500,fade:!0,cssEase:"linear"}),$(".slide").slick({dots:!0,infinite:!1,speed:500,slidesToShow:4,slidesToScroll:4,responsive:[{breakpoint:1024,settings:{slidesToShow:3,slidesToScroll:3,infinite:!0,dots:!0}},{breakpoint:600,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:480,settings:{slidesToShow:1,slidesToScroll:1}}]}))});var containerEl=document.querySelector(".container"),mixer=mixitup(containerEl);window.onload=function(){console.log("window load")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
